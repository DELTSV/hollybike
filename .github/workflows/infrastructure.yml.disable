name: Infrastructure CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'packages/infrastructure/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'packages/infrastructure/**'
      - '.github/workflows/infrastructure.yml'

env:
  CI: true
  TF_VAR_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
  TF_VAR_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_region: ${{ vars.AWS_REGION }}
  TF_VAR_backend_smtp_username: ${{ vars.SMTP_USERNAME }}
  TF_VAR_backend_smtp_password: ${{ secrets.SMTP_PASSWORD }}
  TF_VAR_backend_mapbox_public_token: ${{ secrets.MAPBOX_PUBLIC_TOKEN }}
  TF_VAR_ghcr_password: ${{ secrets.GH_TOKEN }}
  TF_VAR_ghcr_username: ${{ github.actor }}
  TF_VAR_ghcr_image_name: ${{ github.repository }}

defaults:
  run:
    working-directory: packages/infrastructure/project

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Create backend configuration file
        run: |
          echo '${{ secrets.TF_BACKEND_CONFIG }}' > backend.conf

      - name: Terraform Init
        id: init
        run: terraform init --backend-config=backend.conf

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Get latest image tag from repository
        working-directory: .github/scripts
        id: get_image_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo chmod +x get-latest-tag.sh
          echo "tag=$(./get-latest-tag.sh)" >> $GITHUB_OUTPUT

      - name: Terraform Plan
        env:
          TF_VAR_ghcr_image_tag: ${{ steps.get_image_tag.outputs.tag }}
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Export Eagle Eye Config
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: echo "${{ secrets.EAGLE_EYE_CONFIG_FILE }}" | base64 --decode > eagle-eye-config.yml
        continue-on-error: true

      - name: Grant execute permission to Eagle Eye script
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: chmod +x ${{ github.workspace }}/.github/scripts/run-eagle-eye.sh
        continue-on-error: true

      - name: Eagle Eye
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: ${{ github.workspace }}/.github/scripts/run-eagle-eye.sh
        continue-on-error: true

      - name: Upload artifact
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: eagle-eye-diagram
          path: packages/infrastructure/project/terraform.png
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        env:
          TF_VAR_ghcr_image_tag: ${{ steps.get_image_tag.outputs.tag }}
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false