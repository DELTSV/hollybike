name: Backend CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'packages/backend/**'
      - '.github/workflows/backend.yml'

env:
  CI: true
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  JAVA_VERSION: 21

defaults:
  run:
    working-directory: packages/backend

jobs:
  build:
    name: Build Backend
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      #      - name: Setup Java
      #        uses: actions/setup-java@v4
      #        with:
      #          distribution: 'corretto'
      #          java-version: 21

      - name: Set up GraalVM (Java ${{ env.JAVA_VERSION }})
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '${{ env.JAVA_VERSION }}'
          cache: 'gradle'

      #      - name: Setup Gradle
      #        uses: gradle/gradle-build-action@v3

      - name: Copy app.json
        working-directory: .
        run: cp app.json packages/backend/app.json

      - name: Read rights to gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test

      - name: Run native compile
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: ./gradlew nativeCompile -Pimage_name=hollybike_server

      #      - name: Create native fake folder
      #        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #        run: mkdir -p build/native/nativeCompile
      #
      #      - name: Create fake executable
      #        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #        run: touch build/native/nativeCompile/hollybike_server

      - name: Log in to the Container registry
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            latest
            type=sha

      - name: Build and push
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          context: packages/backend
          build-args: |
            EXECUTABLE=hollybike_server

      - name: Extract second tag (sha)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: extract-tag
        run: |
          TAGS=(${{ steps.meta.outputs.tags }})
          echo "second-tag=${TAGS[1]}" >> $GITHUB_OUTPUT

      - name: Check and wait for workflow ${{ vars.INFRA_WORKFLOW }} to finish
        uses: ./.github/actions/check-and-wait
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        with:
          workflow: ${{ vars.INFRA_WORKFLOW }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Download task def
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: .
        run: |
          aws ecs describe-task-definition --task-definition ${{ vars.ECS_TASK_NAME }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: backend
          image: ${{ steps.extract-tag.outputs.second-tag }}

      - name: Deploy Amazon ECS task definition
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ vars.ECS_SERVICE }}
          cluster: ${{ vars.ECS_CLUSTER }}
          wait-for-service-stability: true