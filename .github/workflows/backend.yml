name: Backend CI/CD

on:
  release:
    types: [ published ]

  pull_request:
    branches:
      - main
    paths:
      - 'packages/backend/**'
      - '.github/workflows/backend.yml'

env:
  CI: true
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  JAVA_VERSION: 21

defaults:
  run:
    working-directory: packages/backend

permissions:
  id-token: write
  checks: read
  contents: read
  actions: read

jobs:
  #  build-backend-production:
  #    name: Build Backend (production)
  #    runs-on: ubuntu-latest
  #
  #    permissions:
  #      contents: read
  #      packages: write
  #
  #    services:
  #      redis:
  #        image: postgres:15
  #        env:
  #          POSTGRES_PASSWORD: password
  #          POSTGRES_USER: user
  #          POSTGRES_DB: hollybike
  #        ports:
  #          - 5432:5432
  #
  #    steps:
  #      - name: Checkout code
  #        uses: actions/checkout@v4
  #
  #      - name: Set up GraalVM (Java ${{ env.JAVA_VERSION }})
  #        uses: graalvm/setup-graalvm@v1
  #        with:
  #          java-version: '${{ env.JAVA_VERSION }}'
  #          cache: 'gradle'
  #
  #      - name: Copy app.json
  #        working-directory: .
  #        run: cp app.json packages/backend/app.json
  #
  #      - name: Read rights to gradlew
  #        run: chmod +x gradlew
  #
  #      - name: Run tests
  #        run: ./gradlew test
  #
  #      - name: Run native compile
  #        if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'
  #        run: ./gradlew nativeCompile -Pimage_name=hollybike_server
  #
  #      #      - name: Create native fake folder
  #      #        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #      #        run: mkdir -p build/native/nativeCompile
  #      #
  #      #      - name: Create fake executable
  #      #        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #      #        run: touch build/native/nativeCompile/hollybike_server
  #
  #      - name: Log in to the Container registry
  #        if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'
  #        uses: docker/login-action@v3
  #        with:
  #          registry: ${{ env.REGISTRY }}
  #          username: ${{ github.actor }}
  #          password: ${{ secrets.GITHUB_TOKEN }}
  #
  #      - name: Extract metadata (tags, labels) for Docker
  #        if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'
  #        id: meta
  #        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
  #        with:
  #          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #          tags: |
  #            latest
  #            type=sha
  #
  #      - name: Build and push
  #        if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'
  #        uses: docker/build-push-action@v5
  #        with:
  #          push: true
  #          tags: ${{ steps.meta.outputs.tags }}
  #          labels: ${{ steps.meta.outputs.labels }}
  #          context: packages/backend
  #          build-args: |
  #            EXECUTABLE=hollybike_server
  #
  #      - name: Extract second tag (sha)
  #        if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'
  #        id: extract-tag
  #        run: |
  #          TAGS=(${{ steps.meta.outputs.tags }})
  #          echo "second-tag=${TAGS[1]}" >> $GITHUB_OUTPUT
  #
  #      - name: Check and wait for workflow ${{ vars.INFRA_WORKFLOW }} to finish
  #        uses: ./.github/actions/check-and-wait
  #        if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'
  #        with:
  #          workflow: ${{ vars.INFRA_WORKFLOW }}
  #          github-token: ${{ secrets.GITHUB_TOKEN }}
  #
  #      - name: Configure AWS credentials
  #        if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'
  #        uses: aws-actions/configure-aws-credentials@v4
  #        with:
  #          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #          aws-region: ${{ vars.AWS_REGION }}
  #
  #      - name: Download task def
  #        if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'
  #        working-directory: .
  #        run: |
  #          aws ecs describe-task-definition --task-definition ${{ vars.ECS_TASK_NAME }} --query taskDefinition > task-definition.json
  #
  #      - name: Fill in the new image ID in the Amazon ECS task definition
  #        if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'
  #        id: task-def
  #        uses: aws-actions/amazon-ecs-render-task-definition@v1
  #        with:
  #          task-definition: task-definition.json
  #          container-name: backend
  #          image: ${{ steps.extract-tag.outputs.second-tag }}
  #
  #      - name: Deploy Amazon ECS task definition
  #        if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'
  #        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #        with:
  #          task-definition: ${{ steps.task-def.outputs.task-definition }}
  #          service: ${{ vars.ECS_SERVICE }}
  #          cluster: ${{ vars.ECS_CLUSTER }}
  #          wait-for-service-stability: false

  build-frontend:
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'
    uses: ./.github/workflows/frontend.yml
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#      AWS_ACCESS_KEY_ID:
#        required: true
#        description: 'AWS Access Key ID'
#      AWS_SECRET_ACCESS_KEY:
#        required: true
#        description: 'AWS Secret Access Key'
#      AWS_REGION:
#        required: true
#        description: 'AWS Region'
#      AWS_S3_BUCKET:
#        required: true
#        description: 'AWS S3 Bucket'
#      AWS_CF_DIST_ID:
#        required: true
#        description: 'AWS CloudFront Distribution ID'

  build-backend-on-premises:
    needs: [ build-frontend ]
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'
    name: Build Backend (on premises)
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        java-version: [ '21' ]
        include:
          - os: ubuntu-latest
            executable-suffix: ''
          - os: windows-latest
            executable-suffix: '.exe'

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        working-directory: packages/backend
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GraalVM (Java ${{ matrix.java-version }})
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '${{ matrix.java-version }}'
          cache: 'gradle'

      - name: Read rights to gradlew
        run: chmod +x gradlew

      - id: executable
        run: echo "executable_name=hollybike-${{ runner.os }}-${{ github.event.release.tag_name }}-x86_64" >> $GITHUB_OUTPUT

      - name: Check and wait for workflow "Frontend CI/CD" to finish
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'
        uses: ./.github/actions/check-and-wait
        with:
          workflow: "Frontend CI/CD"
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-${{ github.event.release.tag_name }}
          path: packages/backend/src/main/resources/front

      - name: Run native compile
        run: ./gradlew nativeCompile -Pimage_name=${{ steps.executable.outputs.executable_name }}

      - name: Upload release
        if: github.event.release.tag_name
        run: |
          gh release upload \
              ${{ github.event.release.tag_name }} \
              build/native/nativeCompile/${{ steps.executable.outputs.executable_name }}${{ matrix.executable-suffix }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}