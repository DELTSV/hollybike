name: Backend CI/CD

on:
  workflow_call:
    inputs:
      externall_call:
        description: 'To distinguish workflow_call from regular events'
        type: boolean
        required: false
        default: true
      version:
        description: 'Version of the release'
        type: string
        required: true
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
        description: 'AWS Access Key ID'
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: 'AWS Secret Access Key'

  pull_request:
    branches:
      - main
    paths:
      - 'packages/backend/**'
      - '.github/workflows/backend.yml'

env:
  CI: true
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  JAVA_VERSION: 21

defaults:
  run:
    working-directory: packages/backend

permissions:
  checks: read
  contents: read
  actions: read

jobs:
  build-backend-production:
    name: Build & Deploy Backend
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    services:
      redis:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: user
          POSTGRES_DB: hollybike
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Set up GraalVM (Java ${{ env.JAVA_VERSION }})
      #   uses: graalvm/setup-graalvm@v1
      #   with:
      #     java-version: '${{ env.JAVA_VERSION }}'
      #     cache: 'gradle'

      # - name: Copy app.json
      #   working-directory: .
      #   run: cp app.json packages/backend/app.json

      # - name: Read rights to gradlew
      #   run: chmod +x gradlew

      # - name: Run tests
      #   run: ./gradlew test

      # - name: Run native compile
      #   if: ${{ inputs.externall_call }}
      #   run: ./gradlew nativeCompile -Pimage_name=hollybike_server

      - name: Create native fake folder
        if: ${{ inputs.externall_call }}
        run: mkdir -p build/native/nativeCompile

      - name: Create fake executable
        if: ${{ inputs.externall_call }}
        run: touch build/native/nativeCompile/hollybike_server

      - name: Log in to the Container registry
        if: ${{ inputs.externall_call }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        if: ${{ inputs.externall_call }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            latest
            ${{ inputs.version }}

      - name: Build and push
        if: ${{ inputs.externall_call }}
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          context: packages/backend
          build-args: |
            EXECUTABLE=hollybike_server

      - name: Extract second tag (sha)
        if: ${{ inputs.externall_call }}
        id: extract-tag
        run: |
          TAGS=(${{ steps.meta.outputs.tags }})
          echo "second-tag=${TAGS[1]}" >> $GITHUB_OUTPUT

      - name: Check and wait for workflow ${{ vars.INFRA_WORKFLOW }} to finish
        uses: ./.github/actions/check-and-wait
        if: ${{ inputs.externall_call }}
        with:
          workflow: ${{ vars.INFRA_WORKFLOW }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        if: ${{ inputs.externall_call }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Download task def
        if: ${{ inputs.externall_call }}
        working-directory: .
        run: |
          aws ecs describe-task-definition --task-definition ${{ vars.ECS_TASK_NAME }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        if: ${{ inputs.externall_call }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: backend
          image: ${{ steps.extract-tag.outputs.second-tag }}

      # - name: Deploy Amazon ECS task definition
      #   if: ${{ inputs.externall_call }}
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ vars.ECS_SERVICE }}
      #     cluster: ${{ vars.ECS_CLUSTER }}
      #     wait-for-service-stability: false

  build-frontend:
    name: Frontend
    if: ${{ inputs.externall_call }}
    uses: ./.github/workflows/frontend.yml
    with:
      version: ${{ github.event.inputs.version }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  build-backend-on-premises:
    name: Build On Premises
    needs: [ build-frontend ]
    if: ${{ inputs.externall_call }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        java-version: [ '21' ]
        include:
          - os: ubuntu-latest
            executable-suffix: ''
          - os: windows-latest
            executable-suffix: '.exe'

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        working-directory: packages/backend
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up GraalVM (Java ${{ matrix.java-version }})
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '${{ matrix.java-version }}'
          cache: 'gradle'

      - name: Read rights to gradlew
        run: chmod +x gradlew

      - id: executable
        run: echo "executable_name=hollybike-${{ runner.os }}-${{ inputs.version }}-x86_64" >> $GITHUB_OUTPUT

      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: HollyBike-Frontend-${{ inputs.version }}
          path: packages/backend/src/main/resources/front

      # - name: Run native compile
      #   run: ./gradlew nativeCompile -Pimage_name=${{ steps.executable.outputs.executable_name }}

      - name: Create native fake folder
        run: mkdir -p build/native/nativeCompile
  
      - name: Create fake executable
        run: touch build/native/nativeCompile/${{ steps.executable.outputs.executable_name }}${{ matrix.executable-suffix }}

      - name: Upload executable to the artifacts
        uses: actions/upload-artifact@v4
        with:
          name: HollyBike-${{ inputs.version }}-Backend-${{ runner.os }}-${{ inputs.version }}
          path: packages/backend/build/native/nativeCompile/${{ steps.executable.outputs.executable_name }}${{ matrix.executable-suffix }}
          retention-days: 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
