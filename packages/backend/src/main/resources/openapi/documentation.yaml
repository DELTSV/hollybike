openapi: "3.0.0"
info:
  title: "hollybike API"
  description: "hollybike API"
  version: "1.0.0"
servers:
- url: "https://hollybike"
- url: "http://localhost:8080"
paths:
  /{...}:
    get:
      description: ""
      parameters:
      - name: "..."
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            text/html:
              schema:
                type: "string"
  /metrics-micrometer:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /ws:
    get:
      description: ""
      parameters:
      - name: "Connection"
        in: "header"
        required: true
        description: "Websocket Connection parameter"
        schema:
          type: "string"
      - name: "Upgrade"
        in: "header"
        required: true
        description: "Websocket Upgrade parameter"
        schema:
          type: "string"
      - name: "Sec-WebSocket-Key"
        in: "header"
        required: true
        description: "Websocket Sec-WebSocket-Key parameter"
        schema:
          type: "string"
      responses:
        "101":
          description: "Switching Protocols"
          headers:
            Connection:
              required: true
              schema:
                type: "string"
            Upgrade:
              required: true
              schema:
                type: "string"
            Sec-WebSocket-Accept:
              required: true
              schema:
                type: "string"
  /api:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Bienvenue sur l'API hollyBike"
  /api/{path}:
    get:
      description: ""
      parameters:
      - name: "path"
        in: "path"
        required: true
        schema:
          type: "object"
      responses:
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /api/conf-done:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TConfDone"
  /api/on-premise:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TOnPremise"
  /api/smtp:
    get:
      description: ""
      responses:
        "503":
          description: "Service Unavailable"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Service SMTP indisponible, configurer un server SMTP pour\
                    \ accéder à cette fonctionnalité"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /auth/login:
    post:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TLogin"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TAuthInfo"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Utilisateur inconnu"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Mauvais mot de passe"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
  /auth/refresh:
    patch:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TRefresh"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TAuthInfo"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
  /auth/signin:
    post:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TSignup"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TAuthInfo"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Email invalide"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Aucune invitation valide"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "L'utilisateur existe déjà"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "object"
  /users:
    get:
      description: ""
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "per_page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "query"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TLists_TUser"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
  /users/{id}:
    get:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TUser"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Utilisateur inconnu"
    patch:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TUserUpdate"
        required: true
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Utilisateur inconnu"
                Example#2:
                  value: "Utilisateur inconnu"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TUser"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
  /users/{id}/association:
    get:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TAssociation"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Utilisateur inconnu"
  /users/{id}/profile-picture:
    post:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ImagePath"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
  /users/email/{email}:
    get:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "email"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TUser"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Utilisateur inconnu"
  /users/me:
    get:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TUser"
    patch:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TUserUpdateSelf"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TUser"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "new_password et _new_password_again sont différent"
                Example#2:
                  value: "Changer de mot de passe nécessite new_password, new_password_again\
                    \ et old_password"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Mauvais old_password"
  /users/me/profile-picture:
    post:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ImagePath"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
  /users/meta-data:
    get:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /users/username/{username}:
    get:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "username"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TUser"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Utilisateur inconnu"
  /associations:
    get:
      description: ""
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "per_page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "query"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      - name: "parent"
        in: "query"
        required: true
        schema:
          type: "object"
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TLists_TAssociation"
    post:
      description: ""
      parameters:
      - name: "parent"
        in: "query"
        required: true
        schema:
          type: "object"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TNewAssociation"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TAssociation"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "L'association existe déjà"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Erreur serveur interne"
  /associations/{id}:
    delete:
      description: ""
      parameters:
      - name: "parent"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "associations"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Erreur serveur interne"
    get:
      description: ""
      parameters:
      - name: "parent"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "associations"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TAssociation"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
    patch:
      description: ""
      parameters:
      - name: "parent"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "associations"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TUpdateAssociation"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TAssociation"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "L'association existe déjà"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Erreur serveur interne"
  /associations/{id}/invitations:
    get:
      description: ""
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "per_page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "query"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      - name: "parent"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "associations"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "object"
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Association inconnue"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TLists_TInvitation"
  /associations/{id}/invitations/meta-data:
    get:
      description: ""
      parameters:
      - name: "parent"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "associations"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "object"
      - name: "invitation"
        in: "query"
        required: true
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /associations/{id}/onboarding:
    get:
      description: ""
      parameters:
      - name: "parent"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "associations"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "object"
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Association inconnue"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TOnboarding"
  /associations/{id}/picture:
    patch:
      description: ""
      parameters:
      - name: "parent"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "associations"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "object"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Image invalide (JPEG et PNG seulement)"
                Example#2:
                  value: "Type de contenu de l'image manquant"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TAssociation"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Erreur serveur interne"
  /associations/me:
    get:
      description: ""
      parameters:
      - name: "parent"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "associations"
        in: "query"
        required: true
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TAssociation"
    patch:
      description: ""
      parameters:
      - name: "parent"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "associations"
        in: "query"
        required: true
        schema:
          type: "object"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TUpdateAssociation"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TAssociation"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "L'association existe déjà"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Erreur serveur interne"
  /associations/me/onboarding:
    get:
      description: ""
      parameters:
      - name: "parent"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "associations"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "me"
        in: "query"
        required: true
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TOnboarding"
    patch:
      description: ""
      parameters:
      - name: "parent"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "associations"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "me"
        in: "query"
        required: true
        schema:
          type: "object"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TOnboardingUpdate"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TOnboarding"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Vous devez éditer votre association avant ça"
                Example#2:
                  value: "Vous devez éditer le user avant ça"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "object"
  /associations/me/picture:
    patch:
      description: ""
      parameters:
      - name: "parent"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "associations"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "me"
        in: "query"
        required: true
        schema:
          type: "object"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Image invalide (JPEG et PNG seulement)"
                Example#2:
                  value: "Type de contenu de l'image manquant"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TAssociation"
  /associations/meta-data:
    get:
      description: ""
      parameters:
      - name: "parent"
        in: "query"
        required: true
        schema:
          type: "object"
      - name: "associations"
        in: "query"
        required: true
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /storage:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Bienvenue le storage de hollybike"
  /storage/object:
    get:
      description: ""
      responses:
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Inconnu"
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
                format: "byte"
  /invitation:
    get:
      description: ""
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "per_page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "query"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TLists_TInvitation"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "object"
    post:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TInvitationCreation"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TInvitation"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Association inconnue"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Une invitation avec ces paramètres existe déjà"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "object"
  /invitation/{id}/disable:
    patch:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TInvitation"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invitation inconnue"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "object"
  /invitation/{id}/send-mail:
    post:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TMailDest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Mail envoyé"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "L'invitation n'a pas été trouvé ou n'est plus valide"
  /invitation/meta-data:
    get:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /events:
    get:
      description: ""
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "per_page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "query"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TLists_TEventPartial"
    post:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TCreateEvent"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TEvent"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
  /events/{id}:
    delete:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
    get:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Event not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TEvent"
    put:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TUpdateEvent"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TEvent"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
  /events/{id}/cancel:
    patch:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
  /events/{id}/details:
    get:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Event not found"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TEventDetails"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
  /events/{id}/finish:
    patch:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
  /events/{id}/image:
    patch:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TEvent"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
  /events/{id}/journey:
    delete:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
    post:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TAddJourneyToEvent"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
  /events/{id}/pend:
    patch:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
  /events/{id}/schedule:
    patch:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
  /events/archived:
    get:
      description: ""
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "per_page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "query"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TLists_TEventPartial"
  /events/future:
    get:
      description: ""
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "per_page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "query"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TLists_TEventPartial"
  /events/meta-data:
    get:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /conf:
    put:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
  /api/restart:
    delete:
      description: ""
      responses:
        "410":
          description: "Gone"
          content:
            '*/*':
              schema:
                type: "object"
  /events/{id}/participations:
    delete:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
    get:
      description: ""
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "per_page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "query"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
                Example#2:
                  value: "Internal server error"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TLists_TEventParticipation"
    post:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TEventParticipation"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
  /events/{id}/participations/{userId}:
    delete:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
  /events/{id}/participations/{userId}/demote:
    patch:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TEventParticipation"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
  /events/{id}/participations/{userId}/promote:
    patch:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      - name: "userId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TEventParticipation"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
  /events/{id}/participations/add-users:
    post:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TCreateParticipations"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Aucun utilisateur fourni"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TEventParticipation"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
  /events/{id}/participations/candidates:
    get:
      description: ""
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "per_page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "query"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
                Example#2:
                  value: "Internal server error"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TLists_TUserPartial"
  /events/{id}/participations/images-visibility:
    patch:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TUpdateImagesVisibility"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TEventParticipation"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
  /events/{id}/images:
    post:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TEventImage"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
  /events/images:
    get:
      description: ""
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "per_page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "query"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TLists_TEventImage"
  /events/images/{imageId}:
    delete:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "imageId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "204":
          description: "No Content"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
    get:
      description: ""
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "per_page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "query"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "imageId"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TEventImageDetails"
  /events/images/me:
    get:
      description: ""
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "per_page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "query"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TLists_TEventImage"
  /events/images/meta-data:
    get:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /journeys:
    get:
      description: ""
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "per_page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "query"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TLists_TJourney"
    post:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TNewJourney"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TJourney"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Association inconnue"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "object"
  /journeys/{id}:
    delete:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Trajet inconnu"
        "204":
          description: "No Content"
          content:
            '*/*':
              schema:
                type: "object"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TJourney"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Le trajet n'as pas été trouvé"
  /journeys/{id}/file:
    post:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Le fichier n'est n'y un GPX ni un GeoJSON"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Le trajet n'as pas été trouvé"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TJourney"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "object"
  /journeys/{id}/positions:
    get:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Trajet inconnu"
        "200":
          description: ""
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Les positions n'ont pas encore été récupérées"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Erreur lors de la récupération des positions"
        "410":
          description: "Gone"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Les positions ont déjà été récupérées"
  /journeys/meta-data:
    get:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /profiles:
    get:
      description: ""
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "per_page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "query"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TLists_TUserPartial"
  /profiles/{id}:
    get:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TUserPartial"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
  /profiles/meta-data:
    get:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /notifications:
    get:
      description: ""
      parameters:
      - name: "page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "per_page"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "query"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "sort"
        in: "query"
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TLists_TNotification"
  /notifications/{id}/seen:
    put:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Aucune notification trouvé"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TNotification"
  /notifications/meta-data:
    get:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /notifications/seen:
    put:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /:
    get:
      description: ""
      parameters:
      - name: "Connection"
        in: "header"
        required: true
        description: "Websocket Connection parameter"
        schema:
          type: "string"
      - name: "Upgrade"
        in: "header"
        required: true
        description: "Websocket Upgrade parameter"
        schema:
          type: "string"
      - name: "Sec-WebSocket-Key"
        in: "header"
        required: true
        description: "Websocket Sec-WebSocket-Key parameter"
        schema:
          type: "string"
      responses:
        "101":
          description: "Switching Protocols"
          headers:
            Connection:
              required: true
              schema:
                type: "string"
            Upgrade:
              required: true
              schema:
                type: "string"
            Sec-WebSocket-Accept:
              required: true
              schema:
                type: "string"
components:
  schemas:
    TConfDone:
      type: "object"
      properties:
        confDone:
          type: "boolean"
    TOnPremise:
      type: "object"
      properties: {}
    TLogin:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
        device:
          type: "string"
      required:
      - "email"
      - "password"
    TAuthInfo:
      type: "object"
      properties:
        token:
          type: "string"
        refreshToken:
          type: "string"
        deviceId:
          type: "string"
      required:
      - "token"
      - "refreshToken"
      - "deviceId"
    TRefresh:
      type: "object"
      properties:
        device:
          type: "string"
        token:
          type: "string"
      required:
      - "device"
      - "token"
    TSignup:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
        username:
          type: "string"
        verify:
          type: "string"
        association:
          type: "integer"
          format: "int32"
        role:
          type: "string"
          enum:
          - "User"
          - "Admin"
          - "Root"
        invitation:
          type: "integer"
          format: "int32"
      required:
      - "email"
      - "password"
      - "username"
      - "verify"
      - "role"
    Instant:
      type: "object"
      properties: {}
    TAssociation:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        status:
          type: "string"
          enum:
          - "Enabled"
          - "Disabled"
        picture:
          type: "string"
      required:
      - "name"
      - "status"
    TUser:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        email:
          type: "string"
        username:
          type: "string"
        scope:
          type: "string"
          enum:
          - "User"
          - "Admin"
          - "Root"
        status:
          type: "string"
          enum:
          - "Enabled"
          - "Disabled"
        lastLogin:
          $ref: "#/components/schemas/Instant"
        association:
          $ref: "#/components/schemas/TAssociation"
        profilePicture:
          type: "string"
        role:
          type: "string"
      required:
      - "email"
      - "username"
      - "scope"
      - "status"
      - "lastLogin"
      - "association"
    TLists:
      type: "object"
      properties:
        data:
          type: "array"
        page:
          type: "integer"
          format: "int32"
        totalPage:
          type: "integer"
          format: "int32"
        perPage:
          type: "integer"
          format: "int32"
        totalData:
          type: "integer"
          format: "int32"
      required:
      - "data"
    TLists_TUser:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/components/schemas/TUser"
        page:
          type: "integer"
          format: "int32"
        totalPage:
          type: "integer"
          format: "int32"
        perPage:
          type: "integer"
          format: "int32"
        totalData:
          type: "integer"
          format: "int32"
    TUserUpdate:
      type: "object"
      properties:
        username:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        status:
          type: "string"
          enum:
          - "Enabled"
          - "Disabled"
        scope:
          type: "string"
          enum:
          - "User"
          - "Admin"
          - "Root"
        association:
          type: "integer"
          format: "int32"
        role:
          type: "string"
    ImagePath:
      type: "object"
      properties:
        path:
          type: "string"
      required:
      - "path"
    TUserUpdateSelf:
      type: "object"
      properties:
        username:
          type: "string"
        newPassword:
          type: "string"
        newPasswordAgain:
          type: "string"
        oldPassword:
          type: "string"
        role:
          type: "string"
    Map:
      type: "object"
      properties: {}
    Map_String:
      type: "string"
    TLists_TAssociation:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/components/schemas/TAssociation"
        page:
          type: "integer"
          format: "int32"
        totalPage:
          type: "integer"
          format: "int32"
        perPage:
          type: "integer"
          format: "int32"
        totalData:
          type: "integer"
          format: "int32"
    TNewAssociation:
      type: "object"
      properties:
        name:
          type: "string"
      required:
      - "name"
    TUpdateAssociation:
      type: "object"
      properties:
        name:
          type: "string"
        status:
          type: "string"
          enum:
          - "Enabled"
          - "Disabled"
    TInvitation:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        role:
          type: "string"
          enum:
          - "User"
          - "Admin"
          - "Root"
        status:
          type: "string"
          enum:
          - "Enabled"
          - "Disabled"
        expiration:
          $ref: "#/components/schemas/Instant"
        creation:
          $ref: "#/components/schemas/Instant"
        uses:
          type: "integer"
          format: "int32"
        maxUses:
          type: "integer"
          format: "int32"
        association:
          $ref: "#/components/schemas/TAssociation"
        link:
          type: "string"
      required:
      - "role"
      - "status"
      - "creation"
      - "association"
    TLists_TInvitation:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/components/schemas/TInvitation"
        page:
          type: "integer"
          format: "int32"
        totalPage:
          type: "integer"
          format: "int32"
        perPage:
          type: "integer"
          format: "int32"
        totalData:
          type: "integer"
          format: "int32"
    TOnboarding:
      type: "object"
      properties:
        updateDefaultUser:
          type: "boolean"
        updateAssociation:
          type: "boolean"
        createInvitation:
          type: "boolean"
    TOnboardingUpdate:
      type: "object"
      properties:
        updateDefaultUser:
          type: "boolean"
        updateAssociation:
          type: "boolean"
        createInvitation:
          type: "boolean"
    TInvitationCreation:
      type: "object"
      properties:
        role:
          type: "string"
          enum:
          - "User"
          - "Admin"
          - "Root"
        association:
          type: "integer"
          format: "int32"
        maxUses:
          type: "integer"
          format: "int32"
        expiration:
          $ref: "#/components/schemas/Instant"
      required:
      - "role"
    TMailDest:
      type: "object"
      properties:
        dest:
          type: "string"
      required:
      - "dest"
    TUserPartial:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        username:
          type: "string"
        scope:
          type: "string"
          enum:
          - "User"
          - "Admin"
          - "Root"
        status:
          type: "string"
          enum:
          - "Enabled"
          - "Disabled"
        profilePicture:
          type: "string"
        eventRole:
          type: "string"
          enum:
          - "Member"
          - "Organizer"
        role:
          type: "string"
      required:
      - "username"
      - "scope"
      - "status"
    TPartialAssociation:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        picture:
          type: "string"
      required:
      - "name"
    TEventPartial:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        description:
          type: "string"
        image:
          type: "string"
        status:
          type: "string"
          enum:
          - "Pending"
          - "Scheduled"
          - "Cancelled"
          - "Finished"
          - "Now"
        owner:
          $ref: "#/components/schemas/TUserPartial"
        startDateTime:
          $ref: "#/components/schemas/Instant"
        endDateTime:
          $ref: "#/components/schemas/Instant"
        createDateTime:
          $ref: "#/components/schemas/Instant"
        updateDateTime:
          $ref: "#/components/schemas/Instant"
        association:
          $ref: "#/components/schemas/TPartialAssociation"
      required:
      - "name"
      - "status"
      - "owner"
      - "startDateTime"
      - "createDateTime"
      - "updateDateTime"
      - "association"
    TLists_TEventPartial:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/components/schemas/TEventPartial"
        page:
          type: "integer"
          format: "int32"
        totalPage:
          type: "integer"
          format: "int32"
        perPage:
          type: "integer"
          format: "int32"
        totalData:
          type: "integer"
          format: "int32"
    TCreateEvent:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
        startDate:
          $ref: "#/components/schemas/Instant"
        endDate:
          $ref: "#/components/schemas/Instant"
        association:
          type: "integer"
          format: "int32"
      required:
      - "name"
      - "startDate"
    TEvent:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        description:
          type: "string"
        image:
          type: "string"
        status:
          type: "string"
          enum:
          - "Pending"
          - "Scheduled"
          - "Cancelled"
          - "Finished"
          - "Now"
        owner:
          $ref: "#/components/schemas/TUserPartial"
        startDateTime:
          $ref: "#/components/schemas/Instant"
        endDateTime:
          $ref: "#/components/schemas/Instant"
        createDateTime:
          $ref: "#/components/schemas/Instant"
        updateDateTime:
          $ref: "#/components/schemas/Instant"
        association:
          $ref: "#/components/schemas/TPartialAssociation"
      required:
      - "name"
      - "status"
      - "owner"
      - "startDateTime"
      - "createDateTime"
      - "updateDateTime"
      - "association"
    TUpdateEvent:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
        startDate:
          $ref: "#/components/schemas/Instant"
        endDate:
          $ref: "#/components/schemas/Instant"
      required:
      - "name"
      - "startDate"
    TEventCallerParticipation:
      type: "object"
      properties:
        role:
          type: "string"
          enum:
          - "Member"
          - "Organizer"
        userId:
          type: "integer"
          format: "int32"
        joinedDateTime:
          $ref: "#/components/schemas/Instant"
      required:
      - "role"
      - "joinedDateTime"
    TPosition:
      type: "object"
      properties:
        latitude:
          type: "number"
          format: "double"
        longitude:
          type: "number"
          format: "double"
        altitude:
          type: "number"
          format: "double"
        placeName:
          type: "string"
        placeType:
          type: "string"
        cityName:
          type: "string"
        countryName:
          type: "string"
        countyName:
          type: "string"
        stateName:
          type: "string"
      required:
      - "placeType"
    TJourneyPartial:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        file:
          type: "string"
        previewImage:
          type: "string"
        start:
          $ref: "#/components/schemas/TPosition"
        end:
          $ref: "#/components/schemas/TPosition"
        destination:
          $ref: "#/components/schemas/TPosition"
        totalDistance:
          type: "integer"
          format: "int32"
        minElevation:
          type: "number"
          format: "double"
        maxElevation:
          type: "number"
          format: "double"
        totalElevationGain:
          type: "number"
          format: "double"
        totalElevationLoss:
          type: "number"
          format: "double"
    TEventParticipation:
      type: "object"
      properties:
        user:
          $ref: "#/components/schemas/TUserPartial"
        role:
          type: "string"
          enum:
          - "Member"
          - "Organizer"
        joinedDateTime:
          $ref: "#/components/schemas/Instant"
      required:
      - "user"
      - "role"
      - "joinedDateTime"
    TEventDetails:
      type: "object"
      properties:
        event:
          $ref: "#/components/schemas/TEvent"
        callerParticipation:
          $ref: "#/components/schemas/TEventCallerParticipation"
        journey:
          $ref: "#/components/schemas/TJourneyPartial"
        previewParticipants:
          type: "array"
          items:
            $ref: "#/components/schemas/TEventParticipation"
        previewParticipantsCount:
          type: "integer"
          format: "int32"
      required:
      - "event"
      - "previewParticipants"
    TAddJourneyToEvent:
      type: "object"
      properties:
        journeyId:
          type: "integer"
          format: "int32"
    TLists_TEventParticipation:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/components/schemas/TEventParticipation"
        page:
          type: "integer"
          format: "int32"
        totalPage:
          type: "integer"
          format: "int32"
        perPage:
          type: "integer"
          format: "int32"
        totalData:
          type: "integer"
          format: "int32"
    TCreateParticipations:
      type: "object"
      properties:
        userIds:
          type: "array"
          items:
            type: "integer"
            format: "int32"
      required:
      - "userIds"
    TLists_TUserPartial:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/components/schemas/TUserPartial"
        page:
          type: "integer"
          format: "int32"
        totalPage:
          type: "integer"
          format: "int32"
        perPage:
          type: "integer"
          format: "int32"
        totalData:
          type: "integer"
          format: "int32"
    TUpdateImagesVisibility:
      type: "object"
      properties: {}
    TEventImage:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        url:
          type: "string"
        size:
          type: "integer"
          format: "int32"
        width:
          type: "integer"
          format: "int32"
        height:
          type: "integer"
          format: "int32"
      required:
      - "url"
    TLists_TEventImage:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/components/schemas/TEventImage"
        page:
          type: "integer"
          format: "int32"
        totalPage:
          type: "integer"
          format: "int32"
        perPage:
          type: "integer"
          format: "int32"
        totalData:
          type: "integer"
          format: "int32"
    TEventImageDetails:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        owner:
          $ref: "#/components/schemas/TUserPartial"
        event:
          $ref: "#/components/schemas/TEventPartial"
        position:
          $ref: "#/components/schemas/TPosition"
        takenDateTime:
          $ref: "#/components/schemas/Instant"
        uploadedDateTime:
          $ref: "#/components/schemas/Instant"
      required:
      - "owner"
      - "event"
      - "uploadedDateTime"
    TJourney:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        file:
          type: "string"
        previewImage:
          type: "string"
        createdAt:
          $ref: "#/components/schemas/Instant"
        creator:
          $ref: "#/components/schemas/TUserPartial"
        association:
          $ref: "#/components/schemas/TPartialAssociation"
        start:
          $ref: "#/components/schemas/TPosition"
        end:
          $ref: "#/components/schemas/TPosition"
        destination:
          $ref: "#/components/schemas/TPosition"
        totalDistance:
          type: "integer"
          format: "int32"
        minElevation:
          type: "number"
          format: "double"
        maxElevation:
          type: "number"
          format: "double"
        totalElevationGain:
          type: "number"
          format: "double"
        totalElevationLoss:
          type: "number"
          format: "double"
      required:
      - "name"
      - "createdAt"
      - "creator"
      - "association"
    TLists_TJourney:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/components/schemas/TJourney"
        page:
          type: "integer"
          format: "int32"
        totalPage:
          type: "integer"
          format: "int32"
        perPage:
          type: "integer"
          format: "int32"
        totalData:
          type: "integer"
          format: "int32"
    TNewJourney:
      type: "object"
      properties:
        name:
          type: "string"
        association:
          type: "integer"
          format: "int32"
      required:
      - "name"
    Body:
      type: "object"
      properties: {}
    TNotification:
      type: "object"
      properties:
        data:
          $ref: "#/components/schemas/Body"
        user:
          type: "integer"
          format: "int32"
        id:
          type: "integer"
          format: "int32"
      required:
      - "data"
    TLists_TNotification:
      type: "object"
      properties:
        data:
          type: "array"
          items:
            $ref: "#/components/schemas/TNotification"
        page:
          type: "integer"
          format: "int32"
        totalPage:
          type: "integer"
          format: "int32"
        perPage:
          type: "integer"
          format: "int32"
        totalData:
          type: "integer"
          format: "int32"