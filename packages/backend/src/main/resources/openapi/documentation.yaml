openapi: "3.0.0"
info:
  title: "hollybike API"
  description: "hollybike API"
  version: "1.0.0"
servers:
- url: "https://hollybike"
- url: "http://localhost:8080"
paths:
  /{...}:
    get:
      description: ""
      parameters:
      - name: "..."
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            text/html:
              schema:
                type: "string"
  /json/kotlinx-serialization:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
  /metrics-micrometer:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /ws:
    get:
      description: ""
      parameters:
      - name: "Connection"
        in: "header"
        required: true
        description: "Websocket Connection parameter"
        schema:
          type: "string"
      - name: "Upgrade"
        in: "header"
        required: true
        description: "Websocket Upgrade parameter"
        schema:
          type: "string"
      - name: "Sec-WebSocket-Key"
        in: "header"
        required: true
        description: "Websocket Sec-WebSocket-Key parameter"
        schema:
          type: "string"
      responses:
        "101":
          description: "Switching Protocols"
          headers:
            Connection:
              required: true
              schema:
                type: "string"
            Upgrade:
              required: true
              schema:
                type: "string"
            Sec-WebSocket-Accept:
              required: true
              schema:
                type: "string"
  /api:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Bienvenue sur l'API hollybike"
  /api/{path}:
    get:
      description: ""
      parameters:
      - name: "path"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
  /login:
    post:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TLogin"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TAuthInfo"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
  /logout:
    delete:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "204":
          description: "No Content"
          content:
            '*/*':
              schema:
                type: "object"
  /signin:
    post:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TSignin"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Associations needed"
                Example#2:
                  value: "Invalid email"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TAuthInfo"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Email already exist"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal server error"
  /users/{id}:
    get:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TUser"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User not found"
  /users/me:
    get:
      description: ""
      parameters:
      - name: "api"
        in: "query"
        required: false
        schema:
          type: "object"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TUser"
components:
  schemas:
    Map:
      type: "object"
      properties: {}
    Map_String:
      type: "string"
    TLogin:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
      required:
      - "email"
      - "password"
    TAuthInfo:
      type: "object"
      properties:
        token:
          type: "string"
      required:
      - "token"
    TSignin:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
        username:
          type: "string"
        association:
          type: "integer"
          format: "int32"
      required:
      - "email"
      - "password"
      - "username"
    Instant:
      type: "object"
      properties: {}
    TAssociation:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
      required:
      - "name"
    TUser:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        email:
          type: "string"
        username:
          type: "string"
        scope:
          type: "integer"
          format: "int32"
        status:
          type: "integer"
          format: "int32"
        lastLogin:
          $ref: "#/components/schemas/Instant"
        association:
          $ref: "#/components/schemas/TAssociation"
      required:
      - "email"
      - "username"
      - "lastLogin"
      - "association"